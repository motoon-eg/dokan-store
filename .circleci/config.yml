# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: "13.4.1" # Specify the Xcode version to use
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Setup for builds
          command: |
            mkdir -p 'test-results'
            mkdir -p 'artifacts'
            
      - run:
          name: Build and test
          command: xcodebuild test -workspace 'Dokan.xcworkspace' -scheme 'Dokan' -configuration 'Release' -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13' CODE_SIGN_IDENTITY= | tee 'artifacts/xcode_raw.log' | xcpretty -r junit -o 'test-results/ios-tests/junit.xml'

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: artifacts

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-test: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
