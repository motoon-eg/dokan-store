# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/
version: 2.1

commands:
  fix-image:
    steps:
      - run:
          name: CI Image
          command: |
            # A placeholder command that fixes any issues present on the CircleCI box â€“ there's often something wrong with it,
            # so preserving this step (even if empty) makes the diffs simpler.
            if [ $(echo $PATH | ruby -e "puts Kernel.gets.include?('/usr/local/bin')") != "true" ]; then
              echo 'export PATH=/usr/local/bin:$PATH' >> $BASH_ENV
              echo "Manually added `/usr/local/bin` to the $PATH:"
              echo $PATH
            fi
            chruby ruby-$(cat .ruby-version)
            gem install bundler
            # Add support for fetching SPM packages from GitHub
            for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
            # Prevent fastlane from checking for updates, also removing the verbose fastlane changelog at the end of each invocation.
            echo "export FASTLANE_SKIP_UPDATE_CHECK=1" >> $BASH_ENV

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: "13.4.1" # Specify the Xcode version to use
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - fix-image
      - checkout
      # Commands will execute in macOS container
      # with Xcode 12.5.1 installed
      - run:
          name: Build and run tests
          command: fastlane scan
          environment:
            SCAN_DEVICE: iPhone 11
            SCAN_SCHEME: Dokan

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-test: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
